// This code snippet was auto generated by xls2vlog.py from source file: /home/patrick/Downloads/Interface-Definition.xlsx
// User: patrick
// Date: Jun-15-23



module AXIL_AXIS #( parameter pADDR_WIDTH   = 12,
                    parameter pDATA_WIDTH   = 32
                  )
(
  output wire          m_awvalid,
  output wire  [31: 0] m_awaddr,
  output wire          m_wvalid,
  output wire  [31: 0] m_wdata,
  output wire   [3: 0] m_wstrb,
  output wire          m_arvalid,
  output wire  [31: 0] m_araddr,
  output wire          m_rready,
  output wire  [31: 0] s_rdata,
  output wire          s_rvalid,
  output wire          s_awready,
  output wire          s_wready,
  output wire          s_arready,
  input  wire          s_awvalid,
  input  wire  [14: 0] s_awaddr,
  input  wire          s_wvalid,
  input  wire  [31: 0] s_wdata,
  input  wire   [3: 0] s_wstrb,
  input  wire          s_arvalid,
  input  wire  [14: 0] s_araddr,
  input  wire          s_rready,
  input  wire  [31: 0] m_rdata,
  input  wire          m_rvalid,
  input  wire          m_awready,
  input  wire          m_wready,
  input  wire          m_arready,
  input  wire          cc_aa_enable,
  input  wire  [31: 0] as_aa_tdata,
  input  wire   [3: 0] as_aa_tstrb,
  input  wire   [3: 0] as_aa_tkeep,
  input  wire          as_aa_tlast,
  input  wire          as_aa_tvalid,
  input  wire   [1: 0] as_aa_tuser,
  output  wire         aa_as_tready,
  output wire  [31: 0] aa_as_tdata,
  output wire   [3: 0] aa_as_tstrb,
  output wire   [3: 0] aa_as_tkeep,
  output wire          aa_as_tlast,
  output wire          aa_as_tvalid,
  output wire   [1: 0] aa_as_tuser,
  input  wire          as_aa_tready,
  output wire          mb_irq,
  input  wire          axi_clk,
  input  wire          axi_reset_n,
  input  wire          axis_clk,
  input  wire          axis_rst_n
);

    logic bk_lm_wstart, bk_lm_wdone, bk_lm_rstart, bk_lm_rdone, bk_ls_rd_wr, bk_ls_valid, bk_ls_ready, bk_sm_valid, bk_sm_ready, bk_ss_ready, bk_ss_valid;
    logic [1:0] bk_sm_user, bk_ss_user;
    logic [3:0] bk_lm_wstrb, bk_ls_wstrb;
    logic [14:0] bk_ls_addr;
    logic [31:0] bk_lm_waddr, bk_lm_wdata, bk_lm_raddr, bk_lm_rdata, bk_ls_wdata, bk_ls_rdata, bk_sm_data, bk_ss_data;

    axilite_master lm(
        .axi_aclk(axi_clk),
        .axi_aresetn(axi_reset_n),

        // frontend - axilite master
        .axi_awvalid(m_awvalid),
        .axi_awaddr(m_awaddr),
        .axi_wvalid(m_wvalid),
        .axi_wdata(m_wdata),
        .axi_wstrb(m_wstrb),
        .axi_arvalid(m_arvalid),
        .axi_araddr(m_araddr),
        .axi_rready(m_rready),
        .axi_rdata(m_rdata),
        .axi_awready(m_awready),
        .axi_wready(m_wready),
        .axi_arready(m_arready),
        .axi_rvalid(m_rvalid),

        // backend source to trigger the axilite master transaction
        .bk_wstart(bk_lm_wstart),
        .bk_waddr(bk_lm_waddr),
        .bk_wdata(bk_lm_wdata),
        .bk_wstrb(bk_lm_wstrb),
        .bk_wdone(bk_lm_wdone),
        .bk_rstart(bk_lm_rstart),
        .bk_raddr(bk_lm_raddr),
        .bk_rdata(bk_lm_rdata),
        .bk_rdone(bk_lm_rdone)
    );

    axilite_slave ls(
        .axi_aclk(axi_clk),
        .axi_aresetn(axi_reset_n),

        // frontend - axilite slave
        .axi_awready(s_awready),
        .axi_wready(s_wready),
        .axi_arready(s_arready),
        .axi_rvalid(s_rvalid),
        .axi_rdata(s_rdata),
        .axi_awvalid(s_awvalid),
        .axi_awaddr(s_awaddr),
        .axi_wvalid(s_wvalid),
        .axi_wdata(s_wdata),
        .axi_wstrb(s_wstrb),
        .axi_arvalid(s_arvalid),
        .axi_araddr(s_araddr),
        .axi_rready(s_rready),

        // backend source to receive the axilite slave transaction
        .bk_rd_wr(bk_ls_rd_wr),
        .bk_addr(bk_ls_addr),
        .bk_wdata(bk_ls_wdata),
        .bk_wstrb(bk_ls_wstrb),
        .bk_rdata(bk_ls_rdata),
        .bk_valid(bk_ls_valid),
        .bk_ready(bk_ls_ready),

        .cc_aa_enable(cc_aa_enable)
    );

    axis_master sm(
        .axi_aclk(axis_clk),
        .axi_aresetn(axis_rst_n),

        // frontend - axis master
        .axis_tvalid(aa_as_tvalid),
        .axis_tdata(aa_as_tdata),
        .axis_tstrb(aa_as_tstrb),
        .axis_tkeep(aa_as_tkeep),
        .axis_tlast(aa_as_tlast),
        .axis_tuser(aa_as_tuser),
        .axis_tready(as_aa_tready),

        // backend source to trigger the axis master transaction
        .bk_data(bk_sm_data),
        .bk_user(bk_sm_user),
        .bk_valid(bk_sm_valid),
        .bk_ready(bk_sm_ready)
    );

    axis_slave ss(
        .axi_aclk(axis_clk),
        .axi_aresetn(axis_rst_n),
        
        // frontend - axis slave
        .axis_tvalid(as_aa_tvalid),
        .axis_tdata(as_aa_tdata),
        .axis_tstrb(as_aa_tstrb),
        .axis_tkeep(as_aa_tkeep),
        .axis_tlast(as_aa_tlast),
        .axis_tuser(as_aa_tuser),
        .axis_tready(aa_as_tready),

        // backend source to receive the axis slave transaction
        .bk_data(bk_ss_data),
        .bk_user(bk_ss_user),
        .bk_ready(bk_ss_ready),
        .bk_valid(bk_ss_valid)
    );

    axi_ctrl_logic axi_ctrl_logic(
        .axi_aclk(axi_clk),
        .axi_aresetn(axi_reset_n),
        .axi_interrupt(mb_irq),

        // backend interface, axilite_master (LM)
        .bk_lm_wstart(bk_lm_wstart),
        .bk_lm_waddr(bk_lm_waddr),
        .bk_lm_wdata(bk_lm_wdata),
        .bk_lm_wstrb(bk_lm_wstrb),
        .bk_lm_wdone(bk_lm_wdone),
        .bk_lm_rstart(bk_lm_rstart),
        .bk_lm_raddr(bk_lm_raddr),
        .bk_lm_rdata(bk_lm_rdata),
        .bk_lm_rdone(bk_lm_rdone),

        // backend interface, axilite_slave (LS)
        .bk_ls_rd_wr(bk_ls_rd_wr),
        .bk_ls_addr(bk_ls_addr),
        .bk_ls_wdata(bk_ls_wdata),
        .bk_ls_wstrb(bk_ls_wstrb),
        .bk_ls_rdata(bk_ls_rdata),
        .bk_ls_valid(bk_ls_valid),
        .bk_ls_ready(bk_ls_ready),

        // backend interface, axis_master (SM)
        .bk_sm_data(bk_sm_data),
        .bk_sm_user(bk_sm_user),
        .bk_sm_valid(bk_sm_valid),
        .bk_sm_ready(bk_sm_ready),

        // backend interface, axis_slave (SS)
        .bk_ss_data(bk_ss_data),
        .bk_ss_user(bk_ss_user),
        .bk_ss_ready(bk_ss_ready),
        .bk_ss_valid(bk_ss_valid)
    );
endmodule // AXIL_AXIS
