-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_romcode is
generic (
    C_M_AXI_BUS0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_BUS0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUS0_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUS0_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUS0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUS0_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_BUS0_AWVALID : OUT STD_LOGIC;
    m_axi_BUS0_AWREADY : IN STD_LOGIC;
    m_axi_BUS0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ADDR_WIDTH-1 downto 0);
    m_axi_BUS0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BUS0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_AWUSER_WIDTH-1 downto 0);
    m_axi_BUS0_WVALID : OUT STD_LOGIC;
    m_axi_BUS0_WREADY : IN STD_LOGIC;
    m_axi_BUS0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_DATA_WIDTH-1 downto 0);
    m_axi_BUS0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_DATA_WIDTH/8-1 downto 0);
    m_axi_BUS0_WLAST : OUT STD_LOGIC;
    m_axi_BUS0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_WUSER_WIDTH-1 downto 0);
    m_axi_BUS0_ARVALID : OUT STD_LOGIC;
    m_axi_BUS0_ARREADY : IN STD_LOGIC;
    m_axi_BUS0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ADDR_WIDTH-1 downto 0);
    m_axi_BUS0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BUS0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BUS0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BUS0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUS0_ARUSER_WIDTH-1 downto 0);
    m_axi_BUS0_RVALID : IN STD_LOGIC;
    m_axi_BUS0_RREADY : OUT STD_LOGIC;
    m_axi_BUS0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_DATA_WIDTH-1 downto 0);
    m_axi_BUS0_RLAST : IN STD_LOGIC;
    m_axi_BUS0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_RUSER_WIDTH-1 downto 0);
    m_axi_BUS0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_BVALID : IN STD_LOGIC;
    m_axi_BUS0_BREADY : OUT STD_LOGIC;
    m_axi_BUS0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BUS0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_ID_WIDTH-1 downto 0);
    m_axi_BUS0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUS0_BUSER_WIDTH-1 downto 0);
    internal_bram_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    internal_bram_EN_A : OUT STD_LOGIC;
    internal_bram_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    internal_bram_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    internal_bram_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    internal_bram_Clk_A : OUT STD_LOGIC;
    internal_bram_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of read_romcode is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "read_romcode_read_romcode,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1111,HLS_SYN_LUT=2634,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal romcode : STD_LOGIC_VECTOR (63 downto 0);
    signal length_r : STD_LOGIC_VECTOR (31 downto 0);
    signal BUS0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln31_reg_153 : STD_LOGIC_VECTOR (0 downto 0);
    signal romcode_read_reg_142 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln26_fu_104_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln26_reg_147 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln31_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln17_fu_118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1_fu_122_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln1_reg_162 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_start : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_done : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_idle : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_ready : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWVALID : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WVALID : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WLAST : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARVALID : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_RREADY : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_BREADY : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_EN_A : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal BUS0_AWREADY : STD_LOGIC;
    signal BUS0_WREADY : STD_LOGIC;
    signal BUS0_ARVALID : STD_LOGIC;
    signal BUS0_ARREADY : STD_LOGIC;
    signal BUS0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal BUS0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal BUS0_RVALID : STD_LOGIC;
    signal BUS0_RREADY : STD_LOGIC;
    signal BUS0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal BUS0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal BUS0_BVALID : STD_LOGIC;
    signal grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sext_ln31_fu_131_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal icmp_ln26_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln13_fu_94_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state10_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component read_romcode_read_romcode_Pipeline_VITIS_LOOP_31_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_BUS0_AWVALID : OUT STD_LOGIC;
        m_axi_BUS0_AWREADY : IN STD_LOGIC;
        m_axi_BUS0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_BUS0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BUS0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BUS0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BUS0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BUS0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BUS0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BUS0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BUS0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BUS0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BUS0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BUS0_WVALID : OUT STD_LOGIC;
        m_axi_BUS0_WREADY : IN STD_LOGIC;
        m_axi_BUS0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BUS0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BUS0_WLAST : OUT STD_LOGIC;
        m_axi_BUS0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BUS0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BUS0_ARVALID : OUT STD_LOGIC;
        m_axi_BUS0_ARREADY : IN STD_LOGIC;
        m_axi_BUS0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_BUS0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BUS0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BUS0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BUS0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BUS0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BUS0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BUS0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_BUS0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BUS0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_BUS0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BUS0_RVALID : IN STD_LOGIC;
        m_axi_BUS0_RREADY : OUT STD_LOGIC;
        m_axi_BUS0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_BUS0_RLAST : IN STD_LOGIC;
        m_axi_BUS0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BUS0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_BUS0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BUS0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BUS0_BVALID : IN STD_LOGIC;
        m_axi_BUS0_BREADY : OUT STD_LOGIC;
        m_axi_BUS0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_BUS0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_BUS0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln31 : IN STD_LOGIC_VECTOR (61 downto 0);
        select_ln26 : IN STD_LOGIC_VECTOR (11 downto 0);
        internal_bram_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        internal_bram_EN_A : OUT STD_LOGIC;
        internal_bram_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        internal_bram_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        internal_bram_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component read_romcode_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        romcode : OUT STD_LOGIC_VECTOR (63 downto 0);
        length_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component read_romcode_BUS0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84 : component read_romcode_read_romcode_Pipeline_VITIS_LOOP_31_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_start,
        ap_done => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_done,
        ap_idle => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_idle,
        ap_ready => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_ready,
        m_axi_BUS0_AWVALID => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWVALID,
        m_axi_BUS0_AWREADY => ap_const_logic_0,
        m_axi_BUS0_AWADDR => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWADDR,
        m_axi_BUS0_AWID => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWID,
        m_axi_BUS0_AWLEN => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWLEN,
        m_axi_BUS0_AWSIZE => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWSIZE,
        m_axi_BUS0_AWBURST => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWBURST,
        m_axi_BUS0_AWLOCK => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWLOCK,
        m_axi_BUS0_AWCACHE => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWCACHE,
        m_axi_BUS0_AWPROT => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWPROT,
        m_axi_BUS0_AWQOS => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWQOS,
        m_axi_BUS0_AWREGION => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWREGION,
        m_axi_BUS0_AWUSER => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_AWUSER,
        m_axi_BUS0_WVALID => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WVALID,
        m_axi_BUS0_WREADY => ap_const_logic_0,
        m_axi_BUS0_WDATA => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WDATA,
        m_axi_BUS0_WSTRB => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WSTRB,
        m_axi_BUS0_WLAST => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WLAST,
        m_axi_BUS0_WID => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WID,
        m_axi_BUS0_WUSER => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_WUSER,
        m_axi_BUS0_ARVALID => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARVALID,
        m_axi_BUS0_ARREADY => BUS0_ARREADY,
        m_axi_BUS0_ARADDR => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARADDR,
        m_axi_BUS0_ARID => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARID,
        m_axi_BUS0_ARLEN => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARLEN,
        m_axi_BUS0_ARSIZE => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARSIZE,
        m_axi_BUS0_ARBURST => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARBURST,
        m_axi_BUS0_ARLOCK => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARLOCK,
        m_axi_BUS0_ARCACHE => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARCACHE,
        m_axi_BUS0_ARPROT => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARPROT,
        m_axi_BUS0_ARQOS => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARQOS,
        m_axi_BUS0_ARREGION => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARREGION,
        m_axi_BUS0_ARUSER => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARUSER,
        m_axi_BUS0_RVALID => BUS0_RVALID,
        m_axi_BUS0_RREADY => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_RREADY,
        m_axi_BUS0_RDATA => BUS0_RDATA,
        m_axi_BUS0_RLAST => ap_const_logic_0,
        m_axi_BUS0_RID => ap_const_lv1_0,
        m_axi_BUS0_RFIFONUM => BUS0_RFIFONUM,
        m_axi_BUS0_RUSER => ap_const_lv1_0,
        m_axi_BUS0_RRESP => ap_const_lv2_0,
        m_axi_BUS0_BVALID => ap_const_logic_0,
        m_axi_BUS0_BREADY => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_BREADY,
        m_axi_BUS0_BRESP => ap_const_lv2_0,
        m_axi_BUS0_BID => ap_const_lv1_0,
        m_axi_BUS0_BUSER => ap_const_lv1_0,
        sext_ln31 => trunc_ln1_reg_162,
        select_ln26 => select_ln26_reg_147,
        internal_bram_Addr_A => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_Addr_A,
        internal_bram_EN_A => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_EN_A,
        internal_bram_WEN_A => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_WEN_A,
        internal_bram_Din_A => grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_Din_A,
        internal_bram_Dout_A => ap_const_lv32_0);

    control_s_axi_U : component read_romcode_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        romcode => romcode,
        length_r => length_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    BUS0_m_axi_U : component read_romcode_BUS0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 64,
        MAX_WRITE_BURST_LENGTH => 16,
        USER_RFIFONUM_WIDTH => 11,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUS0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUS0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUS0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUS0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUS0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUS0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUS0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUS0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BUS0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUS0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUS0_CACHE_VALUE,
        USER_DW => 32,
        USER_AW => 64)
    port map (
        AWVALID => m_axi_BUS0_AWVALID,
        AWREADY => m_axi_BUS0_AWREADY,
        AWADDR => m_axi_BUS0_AWADDR,
        AWID => m_axi_BUS0_AWID,
        AWLEN => m_axi_BUS0_AWLEN,
        AWSIZE => m_axi_BUS0_AWSIZE,
        AWBURST => m_axi_BUS0_AWBURST,
        AWLOCK => m_axi_BUS0_AWLOCK,
        AWCACHE => m_axi_BUS0_AWCACHE,
        AWPROT => m_axi_BUS0_AWPROT,
        AWQOS => m_axi_BUS0_AWQOS,
        AWREGION => m_axi_BUS0_AWREGION,
        AWUSER => m_axi_BUS0_AWUSER,
        WVALID => m_axi_BUS0_WVALID,
        WREADY => m_axi_BUS0_WREADY,
        WDATA => m_axi_BUS0_WDATA,
        WSTRB => m_axi_BUS0_WSTRB,
        WLAST => m_axi_BUS0_WLAST,
        WID => m_axi_BUS0_WID,
        WUSER => m_axi_BUS0_WUSER,
        ARVALID => m_axi_BUS0_ARVALID,
        ARREADY => m_axi_BUS0_ARREADY,
        ARADDR => m_axi_BUS0_ARADDR,
        ARID => m_axi_BUS0_ARID,
        ARLEN => m_axi_BUS0_ARLEN,
        ARSIZE => m_axi_BUS0_ARSIZE,
        ARBURST => m_axi_BUS0_ARBURST,
        ARLOCK => m_axi_BUS0_ARLOCK,
        ARCACHE => m_axi_BUS0_ARCACHE,
        ARPROT => m_axi_BUS0_ARPROT,
        ARQOS => m_axi_BUS0_ARQOS,
        ARREGION => m_axi_BUS0_ARREGION,
        ARUSER => m_axi_BUS0_ARUSER,
        RVALID => m_axi_BUS0_RVALID,
        RREADY => m_axi_BUS0_RREADY,
        RDATA => m_axi_BUS0_RDATA,
        RLAST => m_axi_BUS0_RLAST,
        RID => m_axi_BUS0_RID,
        RUSER => m_axi_BUS0_RUSER,
        RRESP => m_axi_BUS0_RRESP,
        BVALID => m_axi_BUS0_BVALID,
        BREADY => m_axi_BUS0_BREADY,
        BRESP => m_axi_BUS0_BRESP,
        BID => m_axi_BUS0_BID,
        BUSER => m_axi_BUS0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => BUS0_ARVALID,
        I_ARREADY => BUS0_ARREADY,
        I_ARADDR => BUS0_ARADDR,
        I_ARLEN => BUS0_ARLEN,
        I_RVALID => BUS0_RVALID,
        I_RREADY => BUS0_RREADY,
        I_RDATA => BUS0_RDATA,
        I_RFIFONUM => BUS0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => BUS0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => BUS0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => BUS0_BVALID,
        I_BREADY => ap_const_logic_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_ready = ap_const_logic_1)) then 
                    grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln31_reg_153 <= icmp_ln31_fu_112_p2;
                romcode_read_reg_142 <= romcode;
                select_ln26_reg_147 <= select_ln26_fu_104_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_reg_153 = ap_const_lv1_0))) then
                trunc_ln1_reg_162 <= romcode_read_reg_142(63 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_reg_153, ap_CS_fsm_state10, ap_block_state2_io, ap_block_state10_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_reg_153 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_reg_153 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    BUS0_ARADDR_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_reg_153, grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARADDR, ap_CS_fsm_state9, ap_CS_fsm_state10, sext_ln31_fu_131_p1, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_reg_153 = ap_const_lv1_0))) then 
            BUS0_ARADDR <= sext_ln31_fu_131_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_153 = ap_const_lv1_0)))) then 
            BUS0_ARADDR <= grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARADDR;
        else 
            BUS0_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    BUS0_ARLEN_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_reg_153, zext_ln17_fu_118_p1, grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARLEN, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_reg_153 = ap_const_lv1_0))) then 
            BUS0_ARLEN <= zext_ln17_fu_118_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_153 = ap_const_lv1_0)))) then 
            BUS0_ARLEN <= grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARLEN;
        else 
            BUS0_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    BUS0_ARVALID_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_reg_153, grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARVALID, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_state2_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_reg_153 = ap_const_lv1_0))) then 
            BUS0_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_153 = ap_const_lv1_0)))) then 
            BUS0_ARVALID <= grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_ARVALID;
        else 
            BUS0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    BUS0_RREADY_assign_proc : process(icmp_ln31_reg_153, grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_RREADY, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln31_reg_153 = ap_const_lv1_0)))) then 
            BUS0_RREADY <= grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_m_axi_BUS0_RREADY;
        else 
            BUS0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    BUS0_blk_n_AR_assign_proc : process(m_axi_BUS0_ARREADY, ap_CS_fsm_state2, icmp_ln31_reg_153)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_reg_153 = ap_const_lv1_0))) then 
            BUS0_blk_n_AR <= m_axi_BUS0_ARREADY;
        else 
            BUS0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state10_on_subcall_done)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_io)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state10_on_subcall_done_assign_proc : process(icmp_ln31_reg_153, grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_done)
    begin
                ap_block_state10_on_subcall_done <= ((grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_done = ap_const_logic_0) and (icmp_ln31_reg_153 = ap_const_lv1_0));
    end process;


    ap_block_state2_io_assign_proc : process(icmp_ln31_reg_153, BUS0_ARREADY)
    begin
                ap_block_state2_io <= ((ap_const_logic_0 = BUS0_ARREADY) and (icmp_ln31_reg_153 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, ap_block_state10_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state10_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_start <= grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_ap_start_reg;
    icmp_ln26_fu_98_p2 <= "1" when (unsigned(length_r) > unsigned(ap_const_lv32_800)) else "0";
    icmp_ln31_fu_112_p2 <= "1" when (select_ln26_fu_104_p3 = ap_const_lv12_0) else "0";
    internal_bram_Addr_A <= grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_Addr_A;
    internal_bram_Clk_A <= ap_clk;
    internal_bram_Din_A <= grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_Din_A;
    internal_bram_EN_A <= grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_EN_A;

    internal_bram_Rst_A_assign_proc : process(ap_rst_n)
    begin
                internal_bram_Rst_A <= not(ap_rst_n);
    end process;

    internal_bram_WEN_A <= grp_read_romcode_Pipeline_VITIS_LOOP_31_1_fu_84_internal_bram_WEN_A;
    select_ln26_fu_104_p3 <= 
        ap_const_lv12_800 when (icmp_ln26_fu_98_p2(0) = '1') else 
        trunc_ln13_fu_94_p1;
        sext_ln31_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_122_p4),64));

    trunc_ln13_fu_94_p1 <= length_r(12 - 1 downto 0);
    trunc_ln1_fu_122_p4 <= romcode_read_reg_142(63 downto 2);
    zext_ln17_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_reg_147),32));
end behav;
