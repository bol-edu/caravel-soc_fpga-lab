// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mmult_mmult_Pipeline_readB (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        sext_ln100,
        mul60,
        b_col,
        b,
        localB_address0,
        localB_ce0,
        localB_we0,
        localB_d0,
        localB_1_address0,
        localB_1_ce0,
        localB_1_we0,
        localB_1_d0,
        localB_2_address0,
        localB_2_ce0,
        localB_2_we0,
        localB_2_d0,
        localB_3_address0,
        localB_3_ce0,
        localB_3_we0,
        localB_3_d0,
        localB_4_address0,
        localB_4_ce0,
        localB_4_we0,
        localB_4_d0,
        localB_5_address0,
        localB_5_ce0,
        localB_5_we0,
        localB_5_d0,
        localB_6_address0,
        localB_6_ce0,
        localB_6_we0,
        localB_6_d0,
        localB_7_address0,
        localB_7_ce0,
        localB_7_we0,
        localB_7_d0,
        localB_8_address0,
        localB_8_ce0,
        localB_8_we0,
        localB_8_d0,
        localB_9_address0,
        localB_9_ce0,
        localB_9_we0,
        localB_9_d0,
        localB_10_address0,
        localB_10_ce0,
        localB_10_we0,
        localB_10_d0,
        localB_11_address0,
        localB_11_ce0,
        localB_11_we0,
        localB_11_d0,
        localB_12_address0,
        localB_12_ce0,
        localB_12_we0,
        localB_12_d0,
        localB_13_address0,
        localB_13_ce0,
        localB_13_we0,
        localB_13_d0,
        localB_14_address0,
        localB_14_ce0,
        localB_14_we0,
        localB_14_d0,
        localB_15_address0,
        localB_15_ce0,
        localB_15_we0,
        localB_15_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [8:0] m_axi_gmem1_RFIFONUM;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [61:0] sext_ln100;
input  [31:0] mul60;
input  [31:0] b_col;
input  [63:0] b;
output  [3:0] localB_address0;
output   localB_ce0;
output   localB_we0;
output  [31:0] localB_d0;
output  [3:0] localB_1_address0;
output   localB_1_ce0;
output   localB_1_we0;
output  [31:0] localB_1_d0;
output  [3:0] localB_2_address0;
output   localB_2_ce0;
output   localB_2_we0;
output  [31:0] localB_2_d0;
output  [3:0] localB_3_address0;
output   localB_3_ce0;
output   localB_3_we0;
output  [31:0] localB_3_d0;
output  [3:0] localB_4_address0;
output   localB_4_ce0;
output   localB_4_we0;
output  [31:0] localB_4_d0;
output  [3:0] localB_5_address0;
output   localB_5_ce0;
output   localB_5_we0;
output  [31:0] localB_5_d0;
output  [3:0] localB_6_address0;
output   localB_6_ce0;
output   localB_6_we0;
output  [31:0] localB_6_d0;
output  [3:0] localB_7_address0;
output   localB_7_ce0;
output   localB_7_we0;
output  [31:0] localB_7_d0;
output  [3:0] localB_8_address0;
output   localB_8_ce0;
output   localB_8_we0;
output  [31:0] localB_8_d0;
output  [3:0] localB_9_address0;
output   localB_9_ce0;
output   localB_9_we0;
output  [31:0] localB_9_d0;
output  [3:0] localB_10_address0;
output   localB_10_ce0;
output   localB_10_we0;
output  [31:0] localB_10_d0;
output  [3:0] localB_11_address0;
output   localB_11_ce0;
output   localB_11_we0;
output  [31:0] localB_11_d0;
output  [3:0] localB_12_address0;
output   localB_12_ce0;
output   localB_12_we0;
output  [31:0] localB_12_d0;
output  [3:0] localB_13_address0;
output   localB_13_ce0;
output   localB_13_we0;
output  [31:0] localB_13_d0;
output  [3:0] localB_14_address0;
output   localB_14_ce0;
output   localB_14_we0;
output  [31:0] localB_14_d0;
output  [3:0] localB_15_address0;
output   localB_15_ce0;
output   localB_15_we0;
output  [31:0] localB_15_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem1_ARVALID;
reg m_axi_gmem1_RREADY;
reg localB_ce0;
reg localB_we0;
reg localB_1_ce0;
reg localB_1_we0;
reg localB_2_ce0;
reg localB_2_we0;
reg localB_3_ce0;
reg localB_3_we0;
reg localB_4_ce0;
reg localB_4_we0;
reg localB_5_ce0;
reg localB_5_we0;
reg localB_6_ce0;
reg localB_6_we0;
reg localB_7_ce0;
reg localB_7_we0;
reg localB_8_ce0;
reg localB_8_we0;
reg localB_9_ce0;
reg localB_9_we0;
reg localB_10_ce0;
reg localB_10_we0;
reg localB_11_ce0;
reg localB_11_we0;
reg localB_12_ce0;
reg localB_12_we0;
reg localB_13_ce0;
reg localB_13_we0;
reg localB_14_ce0;
reg localB_14_we0;
reg localB_15_ce0;
reg localB_15_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem1_blk_n_AR;
reg    gmem1_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state7;
reg   [31:0] gmem1_addr_read_reg_533;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln93_fu_403_p2;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln100_fu_452_p1;
wire  signed [63:0] sext_ln100_cast_fu_374_p1;
reg   [31:0] j_2_fu_118;
wire   [31:0] j_3_fu_476_p2;
reg   [31:0] i_fu_122;
wire   [31:0] i_2_fu_444_p3;
reg   [31:0] loc_1_fu_126;
wire   [31:0] add_ln93_fu_408_p2;
wire   [3:0] trunc_ln100_fu_472_p1;
wire   [0:0] icmp_ln96_fu_425_p2;
wire   [31:0] add_ln97_fu_430_p2;
wire   [31:0] j_fu_436_p3;
wire    ap_CS_fsm_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_122 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_122 <= i_2_fu_444_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_2_fu_118 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_2_fu_118 <= j_3_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem1_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        loc_1_fu_126 <= 32'd0;
    end else if (((icmp_ln93_fu_403_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loc_1_fu_126 <= add_ln93_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem1_addr_read_reg_533 <= m_axi_gmem1_RDATA;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if (((m_axi_gmem1_ARREADY == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln93_fu_403_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_10_ce0 = 1'b1;
    end else begin
        localB_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd10) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_10_we0 = 1'b1;
    end else begin
        localB_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_11_ce0 = 1'b1;
    end else begin
        localB_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd11) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_11_we0 = 1'b1;
    end else begin
        localB_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_12_ce0 = 1'b1;
    end else begin
        localB_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd12) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_12_we0 = 1'b1;
    end else begin
        localB_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_13_ce0 = 1'b1;
    end else begin
        localB_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd13) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_13_we0 = 1'b1;
    end else begin
        localB_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_14_ce0 = 1'b1;
    end else begin
        localB_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_14_we0 = 1'b1;
    end else begin
        localB_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_15_ce0 = 1'b1;
    end else begin
        localB_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd15) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_15_we0 = 1'b1;
    end else begin
        localB_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_1_ce0 = 1'b1;
    end else begin
        localB_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_1_we0 = 1'b1;
    end else begin
        localB_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_2_ce0 = 1'b1;
    end else begin
        localB_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_2_we0 = 1'b1;
    end else begin
        localB_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_3_ce0 = 1'b1;
    end else begin
        localB_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_3_we0 = 1'b1;
    end else begin
        localB_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_4_ce0 = 1'b1;
    end else begin
        localB_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_4_we0 = 1'b1;
    end else begin
        localB_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_5_ce0 = 1'b1;
    end else begin
        localB_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_5_we0 = 1'b1;
    end else begin
        localB_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_6_ce0 = 1'b1;
    end else begin
        localB_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_6_we0 = 1'b1;
    end else begin
        localB_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_7_ce0 = 1'b1;
    end else begin
        localB_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_7_we0 = 1'b1;
    end else begin
        localB_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_8_ce0 = 1'b1;
    end else begin
        localB_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_8_we0 = 1'b1;
    end else begin
        localB_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_9_ce0 = 1'b1;
    end else begin
        localB_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd9) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_9_we0 = 1'b1;
    end else begin
        localB_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_ce0 = 1'b1;
    end else begin
        localB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln100_fu_472_p1 == 4'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localB_we0 = 1'b1;
    end else begin
        localB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem1_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem1_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem1_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln93_fu_403_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln93_fu_403_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln93_fu_408_p2 = (loc_1_fu_126 + 32'd1);

assign add_ln97_fu_430_p2 = (i_fu_122 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_2_fu_444_p3 = ((icmp_ln96_fu_425_p2[0:0] == 1'b1) ? add_ln97_fu_430_p2 : i_fu_122);

assign icmp_ln93_fu_403_p2 = ((loc_1_fu_126 == mul60) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_425_p2 = ((j_2_fu_118 == b_col) ? 1'b1 : 1'b0);

assign j_3_fu_476_p2 = (j_fu_436_p3 + 32'd1);

assign j_fu_436_p3 = ((icmp_ln96_fu_425_p2[0:0] == 1'b1) ? 32'd0 : j_2_fu_118);

assign localB_10_address0 = zext_ln100_fu_452_p1;

assign localB_10_d0 = gmem1_addr_read_reg_533;

assign localB_11_address0 = zext_ln100_fu_452_p1;

assign localB_11_d0 = gmem1_addr_read_reg_533;

assign localB_12_address0 = zext_ln100_fu_452_p1;

assign localB_12_d0 = gmem1_addr_read_reg_533;

assign localB_13_address0 = zext_ln100_fu_452_p1;

assign localB_13_d0 = gmem1_addr_read_reg_533;

assign localB_14_address0 = zext_ln100_fu_452_p1;

assign localB_14_d0 = gmem1_addr_read_reg_533;

assign localB_15_address0 = zext_ln100_fu_452_p1;

assign localB_15_d0 = gmem1_addr_read_reg_533;

assign localB_1_address0 = zext_ln100_fu_452_p1;

assign localB_1_d0 = gmem1_addr_read_reg_533;

assign localB_2_address0 = zext_ln100_fu_452_p1;

assign localB_2_d0 = gmem1_addr_read_reg_533;

assign localB_3_address0 = zext_ln100_fu_452_p1;

assign localB_3_d0 = gmem1_addr_read_reg_533;

assign localB_4_address0 = zext_ln100_fu_452_p1;

assign localB_4_d0 = gmem1_addr_read_reg_533;

assign localB_5_address0 = zext_ln100_fu_452_p1;

assign localB_5_d0 = gmem1_addr_read_reg_533;

assign localB_6_address0 = zext_ln100_fu_452_p1;

assign localB_6_d0 = gmem1_addr_read_reg_533;

assign localB_7_address0 = zext_ln100_fu_452_p1;

assign localB_7_d0 = gmem1_addr_read_reg_533;

assign localB_8_address0 = zext_ln100_fu_452_p1;

assign localB_8_d0 = gmem1_addr_read_reg_533;

assign localB_9_address0 = zext_ln100_fu_452_p1;

assign localB_9_d0 = gmem1_addr_read_reg_533;

assign localB_address0 = zext_ln100_fu_452_p1;

assign localB_d0 = gmem1_addr_read_reg_533;

assign m_axi_gmem1_ARADDR = sext_ln100_cast_fu_374_p1;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = mul60;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign sext_ln100_cast_fu_374_p1 = $signed(sext_ln100);

assign trunc_ln100_fu_472_p1 = i_2_fu_444_p3[3:0];

assign zext_ln100_fu_452_p1 = j_fu_436_p3;

endmodule //mmult_mmult_Pipeline_readB
