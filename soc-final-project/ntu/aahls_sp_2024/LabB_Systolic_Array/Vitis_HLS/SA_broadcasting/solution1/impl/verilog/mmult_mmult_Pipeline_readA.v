// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mmult_mmult_Pipeline_readA (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        sext_ln69,
        mul,
        a_col,
        a,
        localA_address0,
        localA_ce0,
        localA_we0,
        localA_d0,
        localA_1_address0,
        localA_1_ce0,
        localA_1_we0,
        localA_1_d0,
        localA_2_address0,
        localA_2_ce0,
        localA_2_we0,
        localA_2_d0,
        localA_3_address0,
        localA_3_ce0,
        localA_3_we0,
        localA_3_d0,
        localA_4_address0,
        localA_4_ce0,
        localA_4_we0,
        localA_4_d0,
        localA_5_address0,
        localA_5_ce0,
        localA_5_we0,
        localA_5_d0,
        localA_6_address0,
        localA_6_ce0,
        localA_6_we0,
        localA_6_d0,
        localA_7_address0,
        localA_7_ce0,
        localA_7_we0,
        localA_7_d0,
        localA_8_address0,
        localA_8_ce0,
        localA_8_we0,
        localA_8_d0,
        localA_9_address0,
        localA_9_ce0,
        localA_9_we0,
        localA_9_d0,
        localA_10_address0,
        localA_10_ce0,
        localA_10_we0,
        localA_10_d0,
        localA_11_address0,
        localA_11_ce0,
        localA_11_we0,
        localA_11_d0,
        localA_12_address0,
        localA_12_ce0,
        localA_12_we0,
        localA_12_d0,
        localA_13_address0,
        localA_13_ce0,
        localA_13_we0,
        localA_13_d0,
        localA_14_address0,
        localA_14_ce0,
        localA_14_we0,
        localA_14_d0,
        localA_15_address0,
        localA_15_ce0,
        localA_15_we0,
        localA_15_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [63:0] m_axi_gmem0_AWADDR;
output  [0:0] m_axi_gmem0_AWID;
output  [31:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [0:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [31:0] m_axi_gmem0_WDATA;
output  [3:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [0:0] m_axi_gmem0_WID;
output  [0:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [63:0] m_axi_gmem0_ARADDR;
output  [0:0] m_axi_gmem0_ARID;
output  [31:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [0:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [31:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [0:0] m_axi_gmem0_RID;
input  [8:0] m_axi_gmem0_RFIFONUM;
input  [0:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [0:0] m_axi_gmem0_BID;
input  [0:0] m_axi_gmem0_BUSER;
input  [61:0] sext_ln69;
input  [31:0] mul;
input  [31:0] a_col;
input  [63:0] a;
output  [3:0] localA_address0;
output   localA_ce0;
output   localA_we0;
output  [31:0] localA_d0;
output  [3:0] localA_1_address0;
output   localA_1_ce0;
output   localA_1_we0;
output  [31:0] localA_1_d0;
output  [3:0] localA_2_address0;
output   localA_2_ce0;
output   localA_2_we0;
output  [31:0] localA_2_d0;
output  [3:0] localA_3_address0;
output   localA_3_ce0;
output   localA_3_we0;
output  [31:0] localA_3_d0;
output  [3:0] localA_4_address0;
output   localA_4_ce0;
output   localA_4_we0;
output  [31:0] localA_4_d0;
output  [3:0] localA_5_address0;
output   localA_5_ce0;
output   localA_5_we0;
output  [31:0] localA_5_d0;
output  [3:0] localA_6_address0;
output   localA_6_ce0;
output   localA_6_we0;
output  [31:0] localA_6_d0;
output  [3:0] localA_7_address0;
output   localA_7_ce0;
output   localA_7_we0;
output  [31:0] localA_7_d0;
output  [3:0] localA_8_address0;
output   localA_8_ce0;
output   localA_8_we0;
output  [31:0] localA_8_d0;
output  [3:0] localA_9_address0;
output   localA_9_ce0;
output   localA_9_we0;
output  [31:0] localA_9_d0;
output  [3:0] localA_10_address0;
output   localA_10_ce0;
output   localA_10_we0;
output  [31:0] localA_10_d0;
output  [3:0] localA_11_address0;
output   localA_11_ce0;
output   localA_11_we0;
output  [31:0] localA_11_d0;
output  [3:0] localA_12_address0;
output   localA_12_ce0;
output   localA_12_we0;
output  [31:0] localA_12_d0;
output  [3:0] localA_13_address0;
output   localA_13_ce0;
output   localA_13_we0;
output  [31:0] localA_13_d0;
output  [3:0] localA_14_address0;
output   localA_14_ce0;
output   localA_14_we0;
output  [31:0] localA_14_d0;
output  [3:0] localA_15_address0;
output   localA_15_ce0;
output   localA_15_we0;
output  [31:0] localA_15_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem0_ARVALID;
reg m_axi_gmem0_RREADY;
reg localA_ce0;
reg localA_we0;
reg localA_1_ce0;
reg localA_1_we0;
reg localA_2_ce0;
reg localA_2_we0;
reg localA_3_ce0;
reg localA_3_we0;
reg localA_4_ce0;
reg localA_4_we0;
reg localA_5_ce0;
reg localA_5_we0;
reg localA_6_ce0;
reg localA_6_we0;
reg localA_7_ce0;
reg localA_7_we0;
reg localA_8_ce0;
reg localA_8_we0;
reg localA_9_ce0;
reg localA_9_we0;
reg localA_10_ce0;
reg localA_10_we0;
reg localA_11_ce0;
reg localA_11_we0;
reg localA_12_ce0;
reg localA_12_we0;
reg localA_13_ce0;
reg localA_13_we0;
reg localA_14_ce0;
reg localA_14_we0;
reg localA_15_ce0;
reg localA_15_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem0_blk_n_AR;
reg    gmem0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state7;
reg   [31:0] gmem0_addr_read_reg_531;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln62_fu_401_p2;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln69_fu_450_p1;
wire  signed [63:0] sext_ln69_cast_fu_372_p1;
reg   [31:0] j_fu_116;
wire   [31:0] j_6_fu_474_p2;
reg   [31:0] i_1_fu_120;
wire   [31:0] i_fu_442_p3;
reg   [31:0] loc_fu_124;
wire   [31:0] add_ln62_fu_406_p2;
wire   [3:0] trunc_ln69_fu_470_p1;
wire   [0:0] icmp_ln65_fu_423_p2;
wire   [31:0] add_ln66_fu_428_p2;
wire   [31:0] j_5_fu_434_p3;
wire    ap_CS_fsm_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem0_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_fu_120 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_fu_120 <= i_fu_442_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem0_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_116 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_116 <= j_6_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_gmem0_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        loc_fu_124 <= 32'd0;
    end else if (((icmp_ln62_fu_401_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loc_fu_124 <= add_ln62_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem0_addr_read_reg_531 <= m_axi_gmem0_RDATA;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if (((m_axi_gmem0_ARREADY == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln62_fu_401_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        gmem0_blk_n_AR = m_axi_gmem0_ARREADY;
    end else begin
        gmem0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem0_blk_n_R = m_axi_gmem0_RVALID;
    end else begin
        gmem0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_10_ce0 = 1'b1;
    end else begin
        localA_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd10) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_10_we0 = 1'b1;
    end else begin
        localA_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_11_ce0 = 1'b1;
    end else begin
        localA_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd11) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_11_we0 = 1'b1;
    end else begin
        localA_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_12_ce0 = 1'b1;
    end else begin
        localA_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd12) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_12_we0 = 1'b1;
    end else begin
        localA_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_13_ce0 = 1'b1;
    end else begin
        localA_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd13) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_13_we0 = 1'b1;
    end else begin
        localA_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_14_ce0 = 1'b1;
    end else begin
        localA_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd14) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_14_we0 = 1'b1;
    end else begin
        localA_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_15_ce0 = 1'b1;
    end else begin
        localA_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd15) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_15_we0 = 1'b1;
    end else begin
        localA_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_1_ce0 = 1'b1;
    end else begin
        localA_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_1_we0 = 1'b1;
    end else begin
        localA_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_2_ce0 = 1'b1;
    end else begin
        localA_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_2_we0 = 1'b1;
    end else begin
        localA_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_3_ce0 = 1'b1;
    end else begin
        localA_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_3_we0 = 1'b1;
    end else begin
        localA_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_4_ce0 = 1'b1;
    end else begin
        localA_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_4_we0 = 1'b1;
    end else begin
        localA_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_5_ce0 = 1'b1;
    end else begin
        localA_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_5_we0 = 1'b1;
    end else begin
        localA_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_6_ce0 = 1'b1;
    end else begin
        localA_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_6_we0 = 1'b1;
    end else begin
        localA_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_7_ce0 = 1'b1;
    end else begin
        localA_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_7_we0 = 1'b1;
    end else begin
        localA_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_8_ce0 = 1'b1;
    end else begin
        localA_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd8) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_8_we0 = 1'b1;
    end else begin
        localA_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_9_ce0 = 1'b1;
    end else begin
        localA_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd9) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_9_we0 = 1'b1;
    end else begin
        localA_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_ce0 = 1'b1;
    end else begin
        localA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln69_fu_470_p1 == 4'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localA_we0 = 1'b1;
    end else begin
        localA_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem0_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_gmem0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem0_RREADY = 1'b1;
    end else begin
        m_axi_gmem0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_gmem0_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln62_fu_401_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((icmp_ln62_fu_401_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln62_fu_406_p2 = (loc_fu_124 + 32'd1);

assign add_ln66_fu_428_p2 = (i_1_fu_120 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = (m_axi_gmem0_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i_fu_442_p3 = ((icmp_ln65_fu_423_p2[0:0] == 1'b1) ? add_ln66_fu_428_p2 : i_1_fu_120);

assign icmp_ln62_fu_401_p2 = ((loc_fu_124 == mul) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_423_p2 = ((j_fu_116 == a_col) ? 1'b1 : 1'b0);

assign j_5_fu_434_p3 = ((icmp_ln65_fu_423_p2[0:0] == 1'b1) ? 32'd0 : j_fu_116);

assign j_6_fu_474_p2 = (j_5_fu_434_p3 + 32'd1);

assign localA_10_address0 = zext_ln69_fu_450_p1;

assign localA_10_d0 = gmem0_addr_read_reg_531;

assign localA_11_address0 = zext_ln69_fu_450_p1;

assign localA_11_d0 = gmem0_addr_read_reg_531;

assign localA_12_address0 = zext_ln69_fu_450_p1;

assign localA_12_d0 = gmem0_addr_read_reg_531;

assign localA_13_address0 = zext_ln69_fu_450_p1;

assign localA_13_d0 = gmem0_addr_read_reg_531;

assign localA_14_address0 = zext_ln69_fu_450_p1;

assign localA_14_d0 = gmem0_addr_read_reg_531;

assign localA_15_address0 = zext_ln69_fu_450_p1;

assign localA_15_d0 = gmem0_addr_read_reg_531;

assign localA_1_address0 = zext_ln69_fu_450_p1;

assign localA_1_d0 = gmem0_addr_read_reg_531;

assign localA_2_address0 = zext_ln69_fu_450_p1;

assign localA_2_d0 = gmem0_addr_read_reg_531;

assign localA_3_address0 = zext_ln69_fu_450_p1;

assign localA_3_d0 = gmem0_addr_read_reg_531;

assign localA_4_address0 = zext_ln69_fu_450_p1;

assign localA_4_d0 = gmem0_addr_read_reg_531;

assign localA_5_address0 = zext_ln69_fu_450_p1;

assign localA_5_d0 = gmem0_addr_read_reg_531;

assign localA_6_address0 = zext_ln69_fu_450_p1;

assign localA_6_d0 = gmem0_addr_read_reg_531;

assign localA_7_address0 = zext_ln69_fu_450_p1;

assign localA_7_d0 = gmem0_addr_read_reg_531;

assign localA_8_address0 = zext_ln69_fu_450_p1;

assign localA_8_d0 = gmem0_addr_read_reg_531;

assign localA_9_address0 = zext_ln69_fu_450_p1;

assign localA_9_d0 = gmem0_addr_read_reg_531;

assign localA_address0 = zext_ln69_fu_450_p1;

assign localA_d0 = gmem0_addr_read_reg_531;

assign m_axi_gmem0_ARADDR = sext_ln69_cast_fu_372_p1;

assign m_axi_gmem0_ARBURST = 2'd0;

assign m_axi_gmem0_ARCACHE = 4'd0;

assign m_axi_gmem0_ARID = 1'd0;

assign m_axi_gmem0_ARLEN = mul;

assign m_axi_gmem0_ARLOCK = 2'd0;

assign m_axi_gmem0_ARPROT = 3'd0;

assign m_axi_gmem0_ARQOS = 4'd0;

assign m_axi_gmem0_ARREGION = 4'd0;

assign m_axi_gmem0_ARSIZE = 3'd0;

assign m_axi_gmem0_ARUSER = 1'd0;

assign m_axi_gmem0_AWADDR = 64'd0;

assign m_axi_gmem0_AWBURST = 2'd0;

assign m_axi_gmem0_AWCACHE = 4'd0;

assign m_axi_gmem0_AWID = 1'd0;

assign m_axi_gmem0_AWLEN = 32'd0;

assign m_axi_gmem0_AWLOCK = 2'd0;

assign m_axi_gmem0_AWPROT = 3'd0;

assign m_axi_gmem0_AWQOS = 4'd0;

assign m_axi_gmem0_AWREGION = 4'd0;

assign m_axi_gmem0_AWSIZE = 3'd0;

assign m_axi_gmem0_AWUSER = 1'd0;

assign m_axi_gmem0_AWVALID = 1'b0;

assign m_axi_gmem0_BREADY = 1'b0;

assign m_axi_gmem0_WDATA = 32'd0;

assign m_axi_gmem0_WID = 1'd0;

assign m_axi_gmem0_WLAST = 1'b0;

assign m_axi_gmem0_WSTRB = 4'd0;

assign m_axi_gmem0_WUSER = 1'd0;

assign m_axi_gmem0_WVALID = 1'b0;

assign sext_ln69_cast_fu_372_p1 = $signed(sext_ln69);

assign trunc_ln69_fu_470_p1 = i_fu_442_p3[3:0];

assign zext_ln69_fu_450_p1 = j_5_fu_434_p3;

endmodule //mmult_mmult_Pipeline_readA
